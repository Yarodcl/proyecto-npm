npm audit --> Audita las dependencias que tenemos instaladas en busca de vulnerabilidades.

npm audit fix --> Audita e intenta arreglar las vulnerabilidades de nuestras dependencias.

npm audit --json --> Muestra los resultados de la auditoría a manera más profunda en formato json.

npm audit fix --force --> Corrige los problemas encontrados en las librerías instalando otras dependencias por debajo si es necesario.


♻️ npm uninstall babel-eslint --> *babel-eslint* es solo un paquete de ejemplo, este comando borra la dependecia junto con todo su arbol de sub-dependencias

☠️ Borrar las dependencias desde el archivo de 📦package.json📦 posterior a esto es 
⚠️IMPORTANTE⚠️ borrar la carpeta node_modules con rm -r node_modules y hacer una reinstalacion limpia via "npm install"

Este proceso es necesario cuando se le esta haciendo una "limpia al proyecto" xd para posteriomente hacerle un REFACTOR tambien suele suceder cuando se trabaja con proyectos de prueba 

* npm run build --> Este comando prepara el proyecto para produccion

* npm run build --dd  --> Activa el modo Verbose, nos muestra una informacion mas robusta de lo que esta haciendo o de lo que ejecutarse el comando a la hora de ejecutar el build, asi en dado caso que el proyecto se rompa o una dependencia este mal instala da con esta opcion es mas facil identificar el problema.

*npm ci  => Muestra mensajes como librerias deprecadas o que dejaran de tener soporte, tambien sincroniza 📦package.json📦 con el 📦package-lock.json🔐

¿Que es el 📦package-lock.json🔐?
Este archivo contiene toda la informacion necesaria de cada uno de lo elementos del proyecto, en palabras mas sencillas el 📦package-lock.json🔐 tiene todo el arbol🌳 de dependencias y SUBdependencias que el proyecto tiene, este archivo toma mas relevancia cuando el proyecto se tiene que compilar en la nube o en un servevidor externo 